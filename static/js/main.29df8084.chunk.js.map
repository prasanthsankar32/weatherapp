{"version":3,"sources":["Components/Title.js","Components/Form.js","Components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Title","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","console","log","setState","main","temp","sys","weather","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mRAmBeA,EAjBD,kBACV,6BACA,wBAAIC,UAAU,yBAAd,oBCkBWC,EApBF,SAAAC,GAAK,OACd,0BAAMC,SAAUD,EAAME,YAClB,2BAAG,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,aAC9C,2BAAG,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,gBACjD,iDC2COC,EA/CC,SAAAN,GAAK,OACb,yBAAKF,UAAU,gBACdE,EAAMO,MAAQP,EAAMQ,SAAW,uBAAGV,UAAU,eAAb,YACxB,0BAAMA,UAAU,iBAAhB,IAAkCE,EAAMO,KAAxC,IAA+CP,EAAMQ,UAC5DR,EAAMS,aAAe,uBAAGX,UAAU,eAAb,eACd,0BAAMA,UAAU,iBAAhB,IAAkCE,EAAMS,cAC/CT,EAAMU,UAAY,uBAAGZ,UAAU,eAAb,YACX,0BAAMA,UAAU,iBAAhB,IAAkCE,EAAMU,WAC/CV,EAAMW,aAAe,uBAAGb,UAAU,eAAb,aACd,0BAAMA,UAAU,iBAAhB,IAAkCE,EAAMW,cAC/CX,EAAMY,OAAS,uBAAGd,UAAU,iBAAiBE,EAAMY,SCPtDC,EAAQ,mCAsECC,E,2MAnEbC,MAAM,CACJN,iBAAYO,EACZT,UAAKS,EACLR,aAAQQ,EACRN,cAASM,EACTL,iBAAYK,EACZJ,WAAMI,G,EAERd,W,uCAAa,WAAOe,GAAP,qBAAAC,EAAA,6DACXD,EAAEE,iBACIZ,EAAKU,EAAEG,OAAOC,SAASd,KAAKe,MAC5Bd,EAAQS,EAAEG,OAAOC,SAASb,QAAQc,MAH7B,SAIWC,MAAM,qDAAD,OAAsDhB,EAAtD,YAA8DC,EAA9D,kBAA+EK,IAJ/F,cAILW,EAJK,gBAKMA,EAASC,OALf,OAKLC,EALK,OAMRnB,GAAQC,GACTmB,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACbpB,YAAYiB,EAAKI,KAAKC,KACtBxB,KAAKmB,EAAKtB,KACVI,QAAQkB,EAAKM,IAAIxB,QACjBE,SAASgB,EAAKI,KAAKpB,SACnBC,YAAYe,EAAKO,QAAQ,GAAGtB,YAC5BC,MAAM,MAIP,EAAKiB,SAAS,CACZpB,iBAAYO,EACZT,UAAKS,EACLR,aAAQQ,EACRN,cAASM,EACTL,iBAAYK,EACZJ,MAAM,2BAxBC,4C,8HA8BX,OACE,6BACE,yBAAKd,UAAU,WACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,yBACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,wBACb,kBAAC,EAAD,CAAMI,WAAYgC,KAAKhC,aACvB,kBAAC,EAAD,CACAO,YAAayB,KAAKnB,MAAMN,YACxBF,KAAM2B,KAAKnB,MAAMR,KACjBC,QAAS0B,KAAKnB,MAAMP,QACpBE,SAAUwB,KAAKnB,MAAML,SACrBC,YAAauB,KAAKnB,MAAMJ,YACxBC,MAAOsB,KAAKnB,MAAMH,kB,GAxDlBuB,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.29df8084.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Title = () => (\r\n    <div>\r\n    <h1 className=\"title-container_title\">Weather Finder</h1>\r\n    </div>\r\n)\r\n\r\n// class Title extends React.Component {\r\n//     render() { \r\n//         return ( \r\n//             <div>\r\n//                 <h1>Weather Finder</h1>\r\n//                 <p>Find out temperature,conditions and more...</p>\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n \r\nexport default Title;","import React from 'react';\r\n\r\nconst Form = props => (\r\n    <form onSubmit={props.getWeather}>\r\n        <p><input type=\"text\" name=\"city\" placeholder=\"city...\"/></p>\r\n        <p><input type=\"text\" name=\"country\" placeholder=\"country...\"/></p>\r\n        <button>Get Weather</button>\r\n    </form>\r\n)\r\n\r\n// class Form extends React.Component {\r\n//     render() { \r\n//         return ( \r\n//             <form onSubmit={this.props.getWeather}>\r\n//                 <input type=\"text\" name=\"city\" placeholder=\"city...\"/>\r\n//                 <input type=\"text\" name=\"country\" placeholder=\"country...\"/>\r\n//                 <button>Get Weather</button>\r\n//             </form>\r\n//         );\r\n//     }\r\n// }\r\n \r\nexport default Form;","import React from 'react';\r\n\r\nconst Weather = props => ( \r\n        <div className=\"weather_info\">\r\n        {props.city && props.country && <p className=\"weather_key\">Location:\r\n                <span className=\"weather_value\"> {props.city},{props.country}</span></p>}\r\n        {props.temperature && <p className=\"weather_key\">Temperature:\r\n                <span className=\"weather_value\"> {props.temperature}</span></p>}\r\n        {props.humidity && <p className=\"weather_key\">Humidity:\r\n                <span className=\"weather_value\"> {props.humidity}</span></p>}\r\n        {props.description && <p className=\"weather_key\">Condition:\r\n                <span className=\"weather_value\"> {props.description}</span></p>}\r\n        {props.error && <p className=\"weather_error\">{props.error}</p>}\r\n        </div>\r\n);\r\n\r\n\r\n// const Weather = (props) => {\r\n//     return ( \r\n//         <div>\r\n//         {props.city && props.country && <p>Location:{props.city},{props.country}</p>}\r\n//         {props.temperature && <p>Temperature:{props.temperature}</p>}\r\n//         {props.humidity && <p>Humidity:{props.humidity}</p>}\r\n//         {props.description && <p>Condition:{props.description}</p>}\r\n//         {props.error && <p>{props.error}</p>}\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// class Weather extends React.Component {\r\n//     render() { \r\n//         return ( \r\n//             <div>\r\n//                 {this.props.city && this.props.country && <p>Location:{this.props.city},{this.props.country}</p>}\r\n//                 {this.props.temperature && <p>Temperature:{this.props.temperature}</p>}\r\n//                 {this.props.humidity && <p>Humidity:{this.props.humidity}</p>}\r\n//                 {this.props.description && <p>Condition:{this.props.description}</p>}\r\n//                 {this.props.error && <p>{this.props.error}</p>}\r\n\r\n\r\n//                 {/* <p>Location:{this.props.city},{this.props.country}</p>\r\n//                 <p>Temperature:{this.props.temperature}</p>\r\n//                 <p>Humidity:{this.props.humidity}</p>\r\n//                 <p>Condition:{this.props.description}</p> */}\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n \r\nexport default Weather;","import React from 'react';\nimport Title from './Components/Title';\nimport Form from './Components/Form';\nimport Weather from './Components/Weather';\n\nconst API_KEY=\"a35263291120515cb9a288012d570cb2\";\n\nclass App extends React.Component {\n  state={\n    temperature:undefined,\n    city:undefined,\n    country:undefined,\n    humidity:undefined,\n    description:undefined,\n    error:undefined\n  }\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city=e.target.elements.city.value;\n    const country=e.target.elements.country.value;\n    const api_call= await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`);\n    const data=await api_call.json();\n    if(city && country){\n      console.log(data);\n      this.setState({\n       temperature:data.main.temp,\n       city:data.name,\n       country:data.sys.country,\n       humidity:data.main.humidity,\n       description:data.weather[0].description,\n       error:\"\"\n      })\n    }\n    else{\n      this.setState({\n        temperature:undefined,\n        city:undefined,\n        country:undefined,\n        humidity:undefined,\n        description:undefined,\n        error:\"Please enter the value\"\n       })\n    }\n    \n  }\n  render() { \n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-5 title-container\">\n                  <Title />\n                </div>\n                <div className=\"col-7 form-container\">\n                  <Form getWeather={this.getWeather}/>\n                  <Weather \n                  temperature={this.state.temperature}\n                  city={this.state.city}\n                  country={this.state.country}\n                  humidity={this.state.humidity}\n                  description={this.state.description}\n                  error={this.state.error}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./App.css\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}